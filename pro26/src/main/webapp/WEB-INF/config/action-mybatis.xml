<?xml version="1.0" encoding="UTF-8"?>
<beans
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans">

	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>/WEB-INF/config/jdbc.properties</value>
		</property>
	</bean>

	<bean id="dataSource"
		class="org.apache.ibatis.datasource.pooled.PooledDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis/model/modelConfig.xml" />
		<property name="mapperLocations"
			value="classpath:mybatis/mappers/*.xml" />
	</bean>

	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- <bean id="memberDAO" class="com.spring.member.dao.MemberDAOImpl">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean> -->
</beans>

<!--
<4>


jdbc.properties에 해당하는것을 표현언어로 가져온다

처음에는 시작
propertyPlaceholderConfigurer - 이 객체를 갖고 위치를 말해준다
<locations -s이다 그래서 많이 만들수있고 value를 넣을 수 있다. 
직접적으로 값을 넣지 않는이유는 값을 바꿀때 오는 데미지가 적다
 mysql이니까 하나만 value 생성
=
jdbc.properties를 감지를하게 되고
 
아래쪽에 datasource 태그로 인한 표현언어로 사용할 수 있다.
실질적 db연동해서 4가지 항목을 작업할 수 있는 객체들이 필요한데 이것은 dao에 작업했는데 태그를 땐것뿐이다. 
실질적 연동동dms x


db열어서 사용자아이디 진입하고 그것에 해당하는것이

이것을 할 수 있게 만드는게 sqlSessionFactory이다
그렇기때문에 
sql session은 sqlSessionFactory를 멤버로 갖고있어야한다 
그래야 그 정보를 가이용해서 실질적인 sql구문을(select,delete등등을 실행할수있어서)
modelConfig 별칭한것을 사용해여하니까 value로 추가해줘야한다
실질적 경로도 넣어줘야한다 



그래서 bean객체를 생성할때 sqlsession을 이용해서 객체를 생성하고 이 안에 필드값을  sqlSessionFactory의 주소를 저장한다
아예 생성자 호출 기법으로 만들어준다.

그래서 sqlSessionFactory에는 4가지 항목이 있어야하기때문에 datasource를 만들어주고 


sqlsessiontemplete으로 만든 sqlsession이 실질적 작업을 하려고하면 sqlSessionFactory에 configLocation"는 사용할 위치 sql구문이 있는 위치
mapperLocations에는 매퍼의 위치 classpath를 걸었는데 모든 xml로 끝나는

이름이 action으로 시작한이유는 action-servlet이 실행시켜야하는데
action-servlet은 dispatservlet
action-mybatis는 dispatch의 자원이다 


sqlsession이 실질적 자원
 -->
 
 <!-- 
 
config에 해당하는 action-service가 사라졌다: bean객체가 빠지고 대신 @을 사용했다
항상 폴더의 위치 중요하게 하기 !!!!!!!!!!
 태그 >>>>>@ : 우선순위
 
 
  -->